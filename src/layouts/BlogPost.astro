---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { User, users } from '../consts';
type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, authors } = Astro.props;
const authorUsers = Astro.props.authors.map((author) => users.get(author)).filter((author): author is User => author !== undefined);
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 1280px;
				max-width: calc(100%);
				margin: auto;
				color: rgb(var(--gray-dark));
				line-height: 2em;
			}
			@media (max-width: 720px) {
				.prose {
					line-height: 1.5em;
				}
			}
			.title {
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.author {
				display: flex;
				gap: 1rem;
				margin-top: 20px;
			}
			.author img {
				width: 60px;
				height: 60px;
				border-radius: 50%;
				object-fit: cover;
			}
			.author-info {
				display: flex;
				flex-direction: column;
				justify-content: center;
			}
			.author-info h2 {
				font-size: 1.2rem;
				margin: 0;
				color: rgb(var(--gray-dark));
			}
			.author-info .meta-info {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}
			.date {
				margin-top: 10px;
				margin-bottom: 0;
				font-size: 1rem;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
				font-size: 0.8rem;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="prose">
					
					<div class="title">
						<h1>{title}</h1>
						<div class="author">
							{authorUsers.map((author) => (
								<div class="author">
									<img src={author.image} alt={author.name} />
									<div class="author-info">
										<h2>{author.name}</h2>
										<div class="meta-info">
											<div class="date">
												<FormattedDate date={pubDate} />
												{
													updatedDate && (
														<div class="last-updated-on">
															Last updated on <FormattedDate date={updatedDate} />
														</div>
													)
												}
											</div>
										</div>
									</div>
								</div>
							))}
						</div>
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
